# Usa una imagen ligera de Python 3.12
FROM python:3.12-slim

# Instala las dependencias del sistema necesarias para WeasyPrint y otras bibliotecas
RUN apt-get update && apt-get install -y --no-install-recommends \
    mariadb-client \
    gcc \
    libc-dev \
    python3-dev \
    libffi-dev \
    curl \
    bash \
    openrc \
    build-essential \
    libgobject-2.0-0 \
    libglib2.0-dev \
    libpango-1.0-0 \
    libcairo2 \
    libcairo2-dev \
    libgdk-pixbuf2.0-0 \
    libpangocairo-1.0-0 \
    libxml2 \
    libxml2-dev \
    libxslt1-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Configura el directorio de trabajo
WORKDIR /app

# Copia los archivos necesarios al contenedor
COPY app/ ./app
COPY core/ ./core
COPY migrations/ ./migrations
COPY requirements.txt .

# Elimina archivos cacheados de Python en el build
RUN find . -type d -name "__pycache__" -exec rm -r {} + && \
    find . -type f -name "*.pyc" -exec rm -f {} +

# Copia scripts de entrada y les asigna permisos de ejecución
COPY docker/entrypoints/render_entrypoint.sh /app/render_entrypoint.sh
RUN chmod +x /app/render_entrypoint.sh

COPY scripts/wait-for-db.sh /app/scripts/wait-for-db.sh
RUN chmod +x /app/scripts/wait-for-db.sh

# Crea el archivo .moduleignore
RUN echo "webhook" > /app/.moduleignore

# Actualiza pip
RUN pip install --no-cache-dir --upgrade pip

# Instala las dependencias de Python
RUN pip install --no-cache-dir -r requirements.txt

# Expone el puerto 80
EXPOSE 80

# Comando de entrada para ejecutar la aplicación
CMD ["./render_entrypoint.sh"]
